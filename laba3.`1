import java.util.Random;
class Stack{
    int size;
    int[] stack;
    int top;
    public Stack(int s){
        size = s;
        stack = new int[size];
        top = size / 20;
    }

    public boolean isEmpty() {
        return (top == -1);
    }

    public void push(int a) {
        int i = ++top;
        stack[i] = a;
    }

    public int pop() {
        if (isEmpty()) {
            System.out.println("The stack is empty");
            return 0;
        } else {
            stack[top] = 0;
            return stack[top--];
        }
    }

    public int pick() {
        if (isEmpty()) {
            System.out.println("The stack is empty");
            return 0;
        } else
            return stack[top];
    }

    public void random(){
        for(int i = 0; i < size / 20; i++)
            stack[i] = 1 + (int) (Math.random()*10);
    }

    public void print(){
        System.out.print("( ");
        for(int i = 0; i < stack.length; i++)
            if(stack[i] != 0)
                System.out.print(stack[i] + " ");
        System.out.println(" )");
    }
    public void randomPushPop(int numberOfPushAndPop, int size){
        Random r = new Random();
        Stack stack = new Stack(size);
        int var;
        for(int i = 0; i < numberOfPushAndPop; i++){
            var = r.nextInt(2);
            if(var == 1){
                stack.push(1 + (int) (Math.random()*10));
            }
            else if(var == 0){
                stack.pop();
            }
        }
    }
}
class Lab3 {
    public static void main(String[] args) {
        int rand;
        int row = 5;
        int col = 5;
        int[][] arr = new int[row][col];
        int min = 0;
        int max = 0;
        int[] minInd = new int[2];
        int[] maxInd = new int[2];
        int[] minIndexes = new int[row * col];
        int[] maxIndexes = new int[row * col];
        fill(arr, row, col);
        print(arr, row, col);
        min = min(arr, row, col, min);
        max = max(arr, row, col, max);
        indexesOfMinMax(arr, min, max, row, col, minIndexes, maxIndexes);
        withParam1(args);
        withParam2(args);
        randomStack();
        randomStacks(args);
    }

    public static void randomStack(){
        System.out.println("Random stack:");
        Random r = new Random();
        Stack stack = new Stack(1000);
        stack.random();
        stack.print();
        int numberOfPushAndPop = (int) (Math.random() * 50);
        System.out.println("Number of push and pop = " + numberOfPushAndPop);
        System.out.println("Random stack after changes:");
        int var;
        for(int i = 0; i < numberOfPushAndPop; i++){
            var = r.nextInt(2);
            if(var == 1){
                stack.push(1 + (int) (Math.random()*10));
            }
            else if(var == 0){
                stack.pop();
            }
        }
        stack.print();
        System.out.println("******************************************");
    }

    public static void randomStacks(String[] args){
        System.out.println("Random stacks wih parameters from console:");
        Random r = new Random();
        int size = Integer.parseInt(args[4]);
        Stack stack = new Stack(size);
        stack.random();
        stack.print();
        int numberOfPushAndPop = Integer.parseInt(args[5]);
        System.out.println("Number of push and pop = " + numberOfPushAndPop);
        System.out.println("First Random stack after changes:");
        stack.randomPushPop(numberOfPushAndPop, size);
        stack.print();
        System.out.println("******************************************");
    }

    public static int random(int rand) {
        Random r = new Random();
        int a = rand;
        int x = -a + r.nextInt(a + a - 1);
        return x;
    }

    public static void fill(int[][] arr, int row, int col) {
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                arr[i][j] = random(100);
    }

    public static void print(int[][] arr, int row, int col) {
        for (int i = 0; i < row; i++) {
            System.out.println(" ");
            for (int j = 0; j < col; j++)
                System.out.print(arr[i][j] + " ");
            System.out.println(" ");
        }
    }

    public static int min(int[][] arr, int row, int col, int min) {
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                if (arr[i][j] < min)
                    min = arr[i][j];
        return min;
    }

    public static int max(int[][] arr, int row, int col, int max) {
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                if (arr[i][j] > max)
                    max = arr[i][j];
        return max;
    }

    public static void indexesOfMinMax(int[][] arr, int min, int max, int row, int col, int[] minIndexes, int[] maxIndexes) {
        int pointer1 = -1;
        int pointer2 = 0;
        int pointer3 = 0;
        System.out.print("Indexes of min: ");
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                if (arr[i][j] == min) {
                    pointer1++;
                    pointer2++;
                    minIndexes[pointer1] = i;
                    minIndexes[pointer2] = j;
                    System.out.print("( " + minIndexes[pointer1] + ", " + minIndexes[pointer2] + " )");
                    pointer1++;
                    pointer2++;

                }
        if (minIndexes[2] == 0 && minIndexes[3] == 0) {
            System.out.print(" There is only one minimum.");
        }
        System.out.println();
        pointer1 = -1;
        System.out.print("Indexes of max: ");
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                if (arr[i][j] == max) {
                    pointer1++;
                    pointer3++;
                    maxIndexes[pointer1] = i;
                    maxIndexes[pointer3] = j;
                    System.out.print("( " + maxIndexes[pointer1] + ", " + maxIndexes[pointer3] + " )");
                    pointer1++;
                    pointer3++;
                }
        if (maxIndexes[2] == 0 && maxIndexes[3] == 0) {
            System.out.println(" There is only one maximum.");
        }
        System.out.println("*************************************");
    }

    public static void sortByColumns(int[][] arr, String typeOfSort, int row, int col) {
        boolean isSorted = false;
        int cont;
        if (typeOfSort.equals("decrease")) {
            System.out.println("Sorted by columns from max to min.");
            while (!isSorted) {
                isSorted = true;
                for (int i = 0; i < row - 1; i++)
                    for (int j = 0; j < col; j++)
                        if (arr[i][j] > arr[i + 1][j]) {
                            isSorted = false;
                            cont = arr[i][j];
                            arr[i][j] = arr[i + 1][j];
                            arr[i + 1][j] = cont;
                        }
            }
            print(arr, row, col);
        } else if (typeOfSort.equals("increase")) {
            System.out.println("Sorted by columns from min to max.");
            while (!isSorted) {
                isSorted = true;
                for (int i = 0; i < row - 1; i++)
                    for (int j = 0; j < col; j++)
                        if (arr[i][j] < arr[i + 1][j]) {
                            isSorted = false;
                            cont = arr[i][j];
                            arr[i][j] = arr[i + 1][j];
                            arr[i + 1][j] = cont;
                        }
            }
            print(arr, row, col);
        } else if (typeOfSort.equals("both")) {
            System.out.println("Sorted by columns from max to min.");
            while (!isSorted) {
                isSorted = true;
                for (int i = 0; i < row - 1; i++)
                    for (int j = 0; j < col; j++)
                        if (arr[i][j] > arr[i + 1][j]) {
                            isSorted = false;
                            cont = arr[i][j];
                            arr[i][j] = arr[i + 1][j];
                            arr[i + 1][j] = cont;
                        }
            }
            print(arr, row, col);
            boolean isSorted1 = false;
            System.out.println("Sorted by columns from min to max.");
            while (!isSorted1) {
                isSorted1 = true;
                for (int i = 0; i < row - 1; i++)
                    for (int j = 0; j < col; j++)
                        if (arr[i][j] < arr[i + 1][j]) {
                            isSorted = false;
                            cont = arr[i][j];
                            arr[i][j] = arr[i + 1][j];
                            arr[i + 1][j] = cont;
                        }
            }
            print(arr, row, col);
        }
    }

    public static void withParam1(String[] args) {
        System.out.println("I get the size of this array from console.");
        int row;
        int col;
        try {
            row = Integer.parseInt(args[0]);
            col = Integer.parseInt(args[1]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println(e.getMessage());
            System.out.println("You forgot about parameters.");
        } finally {
            row = Integer.parseInt(args[0]);
            col = Integer.parseInt(args[1]);
        }
        int[][] arr = new int[row][col];
        fill(arr, row, col);
        print(arr, row, col);
        System.out.println();
        System.out.println("Sorted by columns");
        boolean isSorted = false;
        int cont;
        long begin = System.nanoTime();
        while (!isSorted) {
            isSorted = true;
            for (int i = 0; i < row - 1; i++)
                for (int j = 0; j < col; j++)
                    if (arr[i][j] > arr[i + 1][j]) {
                        isSorted = false;
                        cont = arr[i][j];
                        arr[i][j] = arr[i + 1][j];
                        arr[i + 1][j] = cont;
                    }
        }
        long time = System.nanoTime() - begin;
        print(arr, row, col);
        System.out.println("Time of sorting = " + time + " nanoseconds");
        System.out.println("******************************************");
    }

    public static void withParam2(String[] args) {
        System.out.println("I get the size of this array, module of limitation and type of sort from console.");
        int row;
        int col;
        int moduleOfLimitation;
        String typeOfSort;
        try {
            row = Integer.parseInt(args[0]);
            col = Integer.parseInt(args[1]);
            moduleOfLimitation = Integer.parseInt(args[2]);
            typeOfSort = args[3];
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println(e.getMessage());
            System.out.println("You forgot about parameters.");
        } finally {
            row = Integer.parseInt(args[0]);
            col = Integer.parseInt(args[1]);
            moduleOfLimitation = Integer.parseInt(args[2]);
            typeOfSort = args[3];
        }
        int[][] arr = new int[row][col];
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                arr[i][j] = random(moduleOfLimitation);
        print(arr, row, col);
        System.out.println();
        long begin = System.nanoTime();
        sortByColumns(arr, typeOfSort, row, col);
        long time = System.nanoTime() - begin;
        System.out.println("Time of sorting = " + time + " nanoseconds");
        System.out.println("******************************************");
    }

    public static void stack(int s) {
        int size = s;
        int[] stack = new int[size];
        int top = -1;
    }

    public boolean isEmpty(int top) {
        return (top == -1);
    }

    public void push(int a, int top, int[] stack) {
        int i = top++;
        stack[i] = a;
    }

    public int pop(int top, int[] stack) {
        if (isEmpty(top)) {
            System.out.println("The stack is empty");
            return 0;
        } else
            return stack[top--];
    }

    public int pick(int top, int[] stack) {
        if (isEmpty(top)) {
            System.out.println("The stack is empty");
            return 0;
        } else
            return stack[top];
    }
}
