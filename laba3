{
    public static void main(String[] args) {
        int rand;
        int row = 5;
        int col = 5;
        int[][] arr = new int[row][col];
        int min = 0;
        int max = 0;
        int[] minInd = new int[2];
        int[] maxInd = new int[2];
        int[] minIndexes = new int[row*col];
        int[] maxIndexes = new int[row*col];
        fill(arr, row, col);
        print(arr, row, col);
        min = min(arr, row, col, min);
        max = max(arr, row, col, max);
        indexesOfMinMax(arr, min, max, row, col, minIndexes, maxIndexes);
        withParam1(args);
    }
    public static int random(int rand){
        Random r = new Random();
        int a = rand;
        int x = -a + r.nextInt(a + a - 1);
        return x;
    }
    public static void fill(int[][] arr, int row, int col){
        for(int i = 0; i < row; i++)
            for(int j = 0; j < col; j++)
                arr[i][j] = random(100);
    }
    public static void print(int[][] arr, int row, int col){
        for(int i = 0; i < row; i++) {
            System.out.println(" ");
            for (int j = 0; j < col; j++)
                System.out.print(arr[i][j] + " ");
            System.out.println(" ");
        }
    }
    public static int min(int[][] arr, int row, int col, int min) {
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                if (arr[i][j] < min)
                    min = arr[i][j];
        return min;
    }
    public static int max(int[][] arr, int row, int col, int max) {
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                if (arr[i][j] > max)
                    max = arr[i][j];
        return max;
    }
    public static void indexesOfMinMax(int[][] arr, int min, int max, int row, int col, int[] minIndexes, int[] maxIndexes){
        int pointer1 = -1;
        int pointer2 = 0;
        int pointer3 = 0;
        System.out.print("Indexes of min: ");
        for(int i = 0; i < row; i++)
            for(int j = 0; j < col; j++)
                if(arr[i][j] == min) {
                    pointer1++;
                    pointer2++;
                    minIndexes[pointer1] = i;
                    minIndexes[pointer2] = j;
                    System.out.print("( " + minIndexes[pointer1] + ", " + minIndexes[pointer2] + " )");
                    pointer1++;
                    pointer2++;

                }
        if(minIndexes[2] == 0 && minIndexes[3] == 0){
            System.out.print(" There is only one minimum.");
        }
        System.out.println();
        pointer1 = -1;
        System.out.print("Indexes of max: ");
        for(int i = 0; i < row; i++)
            for(int j = 0; j < col; j++)
                if(arr[i][j] == max){
                    pointer1++;
                    pointer3++;
                    maxIndexes[pointer1] = i;
                    maxIndexes[pointer3] = j;
                    System.out.print("( " + maxIndexes[pointer1] + ", " + maxIndexes[pointer3] + " )");
                    pointer1++;
                    pointer3++;
                }
        if(maxIndexes[2] == 0 && maxIndexes[3] == 0){
            System.out.println(" There is only one maximum.");
        }
        System.out.println("*************************************");
    }
    public static void withParam1(String[] args){
        System.out.println("I get the size of this array from console.");
        int row = Integer.parseInt(args[0]);
        int col = Integer.parseInt(args[1]);
        try {
            row = Integer.parseInt(args[0]);
            col = Integer.parseInt(args[1]);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e.getMessage());
            System.out.println("You forgot about parameters.");
        }
        int[][] arr = new int[row][col];
        fill(arr, row, col);
        print(arr, row, col);
        System.out.println();
        System.out.println("Sorted by columns");
        boolean isSorted = false;
        int cont;
        long begin = System.nanoTime();
        while(!isSorted){
            isSorted = true;
            for(int i = 0; i < row - 1; i++)
                for(int j = 0; j < col; j++)
                    if(arr[i][j] > arr[i+1][j]){
                        isSorted = false;
                        cont = arr[i][j];
                        arr[i][j] = arr[i+1][j];
                        arr[i+1][j] = cont;
                    }
        }
        long time = System.nanoTime() - begin;
        print(arr, row, col);
        System.out.println("Time of sorting = " + time + " nanoseconds");
        System.out.println("******************************************");
    }
    public static void withParam2(String[] args) {
        System.out.println("I get the size of this array from console.");
        int row = Integer.parseInt(args[0]);
        int col = Integer.parseInt(args[1]);
        try {
            row = Integer.parseInt(args[0]);
            col = Integer.parseInt(args[1]);
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e.getMessage());
            System.out.println("You forgot about parameters.");
        }
        
        String typeOfSort = args[3];
        int[][] arr = new int[row][col];
        fill(arr, row, col);
        print(arr, row, col);
        System.out.println();
        System.out.println("Sorted by columns");
        boolean isSorted = false;
        int cont;
        long begin = System.nanoTime();
        while(!isSorted){
            isSorted = true;
            for(int i = 0; i < row - 1; i++)
                for(int j = 0; j < col; j++)
                    if(arr[i][j] > arr[i+1][j]){
                        isSorted = false;
                        cont = arr[i][j];
                        arr[i][j] = arr[i+1][j];
                        arr[i+1][j] = cont;
                    }
        }
        long time = System.nanoTime() - begin;
        print(arr, row, col);
        System.out.println("Time of sorting = " + time + " nanoseconds");
        System.out.println("******************************************");
    }
}
